<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Produk</title>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"></script>
</head>

<body>
    <!-- Tombol Back -->
    <header class="bg-dark text-white text-center py-3 position-relative">
        <h1>Order Produk Coffee Shop</h1>
    </header>

    <main class="container mt-4">
        <!-- Kategori Menu -->
        <div class="category-menu-container">
            <button class="scroll-button scroll-left">←</button>
            <div class="category-menu">
                <a href="javascript:void(0);" class="btn btn-outline-light mx-2" onclick="loadProducts()">Semua</a>
                <% categories.forEach(category=> { %>
                    <a href="javascript:void(0);" class="btn btn-outline-light mx-2"
                        onclick="loadProducts('<%= category.id %>')">
                        <%= category.name %>
                    </a>
                    <% }) %>
            </div>
            <button class="scroll-button scroll-right">→</button>
        </div>

        <!-- Produk List -->
        <div id="products-container" class="row">
            <% products.forEach(product=> { %>
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <img class="card-img-top" src="<%= product.imageUrl %>" alt="<%= product.name %>">
                        <div class="card-body">
                            <h5 class="card-title">
                                <%= product.name %>
                            </h5>
                            <p class="card-text">Harga: Rp <%= product.price.toLocaleString() %>
                            </p>
                            <p class="stock">Stok: <%= product.stock %> tersedia</p>
                            <button class="btn btn-primary add-to-cart" data-id="<%= product.id %>"
                                data-name="<%= product.name %>" data-price="<%= product.price %>"
                                data-stock="<%= product.stock %>">Add to Cart</button>
                        </div>
                    </div>
                </div>
                <% }) %>
        </div>

        <!-- Keranjang Belanja -->
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Checkout</h5>
                <div class="form-group">
                    <label for="customer-select">Pilih Customer</label>
                    <select id="customer-select" class="form-control">
                        <option value="">-- Pilih Customer --</option>
                        <% customers.forEach(customer=> { %>
                            <option value="<%= customer.id %>">
                                <%= customer.name %> - <%= customer.phone %> - <%= customer.email %>
                            </option>
                            <% }) %>
                    </select>
                </div>
                <div id="cart-message">
                    <p id="empty-cart-message" class="text-center text-danger" style="display: none;">Anda belum memilih
                        menu.</p>
                </div>
                <table class="table" id="cart-table" style="display: none;">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>QTY</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody id="cart-items"></tbody>
                </table>
                <hr>
                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-danger" id="cancel-order">Cancel Order</button>
                    <button class="btn btn-success" id="pay-button">Pay</button>
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-dark text-white text-center py-3 mt-5">
        <p>&copy; Coffee Shop</p>
    </footer>

    <!-- JavaScript Section -->
    <script>
        let cartItems = [];

        // Fungsi untuk memuat produk berdasarkan kategori
        function loadProducts(categoryId = null) {
            console.log("Filter produk berdasarkan kategori:", categoryId);

            // Filter produk berdasarkan categoryId jika ada
            let filteredProducts = products;

            if (categoryId) {
                filteredProducts = products.filter(product => product.categoryId === categoryId);
            }

            displayProducts(filteredProducts);
        }

        function displayProducts(productsToDisplay) {
            const productsContainer = document.getElementById('products-container');
            productsContainer.innerHTML = ''; // Reset tampilan produk

            productsToDisplay.forEach(product => {
                const productCard = `
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img class="card-img-top" src="${product.imageUrl}" alt="${product.name}">
                    <div class="card-body">
                        <h5 class="card-title">${product.name}</h5>
                        <p class="card-text">Harga: Rp ${product.price.toLocaleString()}</p>
                        <p class="stock">Stok: ${product.stock} tersedia</p>
                        <button class="btn btn-primary add-to-cart" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}" data-stock="${product.stock}">Add to Cart</button>
                    </div>
                </div>
            </div>
        `;
                productsContainer.innerHTML += productCard;
            });
        }

        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-id');
                const productName = this.getAttribute('data-name');
                const productPrice = this.getAttribute('data-price');
                const productStock = parseInt(this.getAttribute('data-stock'));

                const existingProduct = cartItems.find(item => item.id === productId);
                if (existingProduct) {
                    if (existingProduct.quantity < productStock) {
                        existingProduct.quantity += 1; // Tambah jumlah jika produk sudah ada dan stok masih tersedia
                    } else {
                        alert("Stok tidak cukup untuk produk ini.");
                    }
                } else {
                    if (productStock > 0) {
                        cartItems.push({
                            id: productId,
                            name: productName,
                            price: productPrice,
                            stock: productStock,
                            quantity: 1
                        });
                    } else {
                        alert("Stok tidak cukup untuk produk ini.");
                    }
                }

                updateCart();
            });
        });


        // Update tampilan keranjang
function updateCart() {
    const cartTable = document.getElementById('cart-items');
    cartTable.innerHTML = ''; // Reset table

    cartItems.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${item.name}</td>
            <td>
                <button class="btn btn-sm btn-secondary decrease-qty" data-id="${item.id}">-</button>
                ${item.quantity}
                <button class="btn btn-sm btn-secondary increase-qty" data-id="${item.id}">+</button>
            </td>
            <td>Rp ${item.price.toLocaleString()}</td>
            <td>Rp ${(item.price * item.quantity).toLocaleString()}</td>
        `;
        cartTable.appendChild(row);
    });

    // Tampilkan tabel jika ada barang di keranjang
    const cartMessage = document.getElementById('empty-cart-message');
    const cartTableContainer = document.getElementById('cart-table');

    if (cartItems.length === 0) {
        cartMessage.style.display = 'block';
        cartTableContainer.style.display = 'none';
    } else {
        cartMessage.style.display = 'none';
        cartTableContainer.style.display = 'table';
    }

    // Tambahkan event listener untuk tombol - dan +
    document.querySelectorAll('.decrease-qty').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.getAttribute('data-id');
            const product = cartItems.find(item => item.id === productId);

            if (product && product.quantity > 1) {
                product.quantity -= 1; // Kurangi jumlah
                updateCart(); // Update tampilan keranjang
            }
        });
    });

    document.querySelectorAll('.increase-qty').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.getAttribute('data-id');
            const product = cartItems.find(item => item.id === productId);

            if (product && product.quantity < product.stock) {
                product.quantity += 1; // Tambah jumlah
                updateCart(); // Update tampilan keranjang
            } else {
                alert("Stok tidak cukup untuk menambah produk ini.");
            }
        });
    });
}

        // Pembatalan pesanan
        document.getElementById('cancel-order').addEventListener('click', function () {
            cartItems = []; // Kosongkan keranjang
            updateCart(); // Update tampilan keranjang
        });

        document.getElementById('pay-button').addEventListener('click', function () {
            if (cartItems.length === 0) {
                alert("Keranjang Anda kosong. Silakan pilih produk.");
            } else {
                const customerId = document.getElementById('customer-select').value;
                if (!customerId) {
                    alert("Silakan pilih customer.");
                    return;
                }

                const orderData = {
                    customerId: customerId,
                    orderItems: cartItems.map(item => ({
                        productId: item.id,
                        quantity: item.quantity
                    }))
                };

                // Kirim data ke API
                fetch('http://localhost:5272/api/order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("Pembayaran berhasil, pesanan dibuat!");
                            cartItems = []; // Kosongkan keranjang
                            updateCart();  // Update tampilan keranjang
                        } else {
                            alert("Terjadi kesalahan saat membuat pesanan.");
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("Terjadi kesalahan saat mengirim pesanan.");
                    });
            }
        });

    </script>

</body>

</html>